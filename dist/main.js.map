{"version":3,"sources":["webpack://javascript-project-2021/./src/main.js"],"names":["background","document","querySelector","backgroundsArray","quoteText","quoteAuthor","getQuote","fetch","then","res","json","data","index","Math","round","random","innerHTML","text","author","catch","err","console","log","addEventListener","clockNumbers","clockDate","greeting","greetingText","greetingIcon","hrLine","minLine","scLine","digitalClock","analogClock","classList","toggle","todayTempText","tomorrowTempText","overmorrowTempText","todayDescText","tomorrowDescText","overmorrowDescText","todayIcon","tomorrowIcon","overmorrowIcon","weatherIconArray","setWeatherIcon","fieldName","desc","includes","style","backgroundImage","assignWeatherData","weatherData","todayData","tomorrowData","overmorrowData","todayDesc","weather","description","tomorrowDesc","overmorrowDesc","Number","main","temp","form","errMsg","e","preventDefault","searchLocation","value","toLowerCase","reset","userLocation","weatherDataLocation","list","getWeatherByCity","setInterval","randomNumber","floor","currentTime","Date","currentHour","getHours","currentMinute","getMinutes","currentTimeText","currentDay","getDate","currentMonth","getMonth","currentDateText","getFullYear","add","analogDate","hour","min","sec","getSeconds","transform","navigator","geolocation","getCurrentPosition","position","lat","lon","getWeather","coords","latitude","longitude","alert"],"mappings":"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","file":"main.js","sourcesContent":["//get random background and change it after 5 minuter\nconst background = document.querySelector('.main-screen');\nconst backgroundsArray = [\n  \"url('./assets/ajai-arif-a_nu2fRoqwI-unsplash.jpg')\",\n  \"url('./assets/antonio-grosz-Wc-1sAv4cn4-unsplash.jpg')\",\n  \"url('./assets/dave-hoefler-jdgfzZF8PMs-unsplash.jpg')\",\n  \"url('./assets/dave-hoefler-4pvfpUkmR6I-unsplash.jpg')\",\n  \"url('./assets/dave-hoefler-JZKl9ZjSjWA-unsplash.jpg')\",\n  \"url('./assets/dave-hoefler-lsIBgbLQSsQ-unsplash.jpg')\",\n  \"url('./assets/dave-hoefler-oZxutmdh5dE-unsplash.jpg')\",\n  \"url('./assets/jonatan-pie-OPOg0fz5uIs-unsplash.jpg')\",\n  \"url('./assets/marco-mons--_3HeEkP-fE-unsplash.jpg')\",\n  \"url('./assets/ricardo-gomez-angel-ZCPwkmfsHNY-unsplash.jpg')\",\n];\nconst getRandomNumber = () => {\n  return Math.floor(Math.random() * (9 - 0 + 1)) + 0;\n};\nconst getRandomBackground = () => {\n  setInterval(() => {\n    const randomNumber = getRandomNumber();\n    background.style.backgroundImage = backgroundsArray[randomNumber];\n  }, 300000);\n};\n//random quote api\nconst quoteText = document.querySelector('.quote');\nconst quoteAuthor = document.querySelector('.quote-author');\nconst getQuoteBtn = document.querySelector('.get-quote-btn');\nconst getQuote = () => {\n  fetch('https://type.fit/api/quotes')\n    .then(res => res.json())\n    .then(data => {\n      const index = Math.round(Math.random() * 1643);\n      quoteText.innerHTML = data[index].text;\n      quoteAuthor.innerHTML = data[index].author;\n    })\n    .catch(err => {\n      console.log(err);\n    });\n};\ngetQuoteBtn.addEventListener('click', getQuote);\n//get date function\nconst clockNumbers = document.querySelector('.clock-numbers');\nconst clockDate = document.querySelector('.clock-date');\nlet greeting;\nconst greetingText = document.querySelector('.greeting');\nconst greetingIcon = document.querySelector('.greeting-icon');\n//set time for digital clock\nconst getDate = () => {\n  setInterval(() => {\n    //getting time\n    const currentTime = new Date();\n    const currentHour = currentTime.getHours();\n    let currentMinute = currentTime.getMinutes();\n    currentMinute = (currentMinute < 10 ? '0' : '') + currentMinute;\n    const currentTimeText = currentHour + ':' + currentMinute;\n    clockNumbers.innerHTML = currentTimeText;\n    //getting date\n    let currentDay = currentTime.getDate();\n    let currentMonth = currentTime.getMonth();\n    const currentYear = currentTime.getFullYear();\n    currentDay = (currentDay < 10 ? '0' : '') + currentDay;\n    currentMonth = (currentMonth < 10 ? '0' : '') + currentMonth;\n    const currentDateText = currentDay + '.' + currentMonth + '.' + currentYear;\n    clockDate.innerHTML = currentDateText;\n    //check if you should say morning/afternoon/evening\n    if (currentHour === 24) {\n      greeting = 'good morning,';\n      greetingText.innerHTML = greeting;\n      greetingIcon.classList.add('fa-coffee');\n    } else if (currentHour >= 1 && currentHour < 13) {\n      greeting = 'good morning,';\n      greetingText.innerHTML = greeting;\n      greetingIcon.classList.add('fa-coffee');\n    } else if (currentHour >= 13 && currentHour < 17) {\n      greeting = 'good afternoon,';\n      greetingText.innerHTML = greeting;\n      greetingIcon.classList.add('fa-sun');\n    } else {\n      greeting = 'good evening,';\n      greetingText.innerHTML = greeting;\n      greetingIcon.classList.add('fa-moon');\n    }\n  }, 1000);\n};\n//get date for analog clock\nconst degree = 6;\nconst hrLine = document.querySelector('#hr');\nconst minLine = document.querySelector('#mn');\nconst scLine = document.querySelector('#sc');\nconst getDateForAnalog = () => {\n  setInterval(() => {\n    const analogDate = new Date();\n    const hour = analogDate.getHours() * 30;\n    const min = analogDate.getMinutes() * degree;\n    const sec = analogDate.getSeconds() * degree;\n    hrLine.style.transform = `rotateZ(${hour + min / 12}deg)`;\n    minLine.style.transform = `rotateZ(${min}deg)`;\n    scLine.style.transform = `rotateZ(${sec}deg)`;\n  });\n};\n//using switch to display digital/analog clock\nconst digitalClock = document.querySelector('.digital-clock');\nconst analogClock = document.querySelector('.analog-clock');\nconst switchBtn = document.querySelector('.switch');\nconst displayClock = () => {\n  digitalClock.classList.toggle('invisible');\n  analogClock.classList.toggle('invisible');\n};\nswitchBtn.addEventListener('change', displayClock);\n//weather api\nconst secondaryScreen = document.querySelector('.secondary-screen');\nconst todayTempText = document.querySelector('.today-temp');\nconst tomorrowTempText = document.querySelector('.tomorrow-temp');\nconst overmorrowTempText = document.querySelector('.overmorrow-temp');\nconst todayDescText = document.querySelector('.today-desc');\nconst tomorrowDescText = document.querySelector('.tomorrow-desc');\nconst overmorrowDescText = document.querySelector('.overmorrow-desc');\nconst todayIcon = document.querySelector('.today-icon');\nconst tomorrowIcon = document.querySelector('.tomorrow-icon');\nconst overmorrowIcon = document.querySelector('.overmorrow-icon');\n//setting correct icon for weather\nconst weatherIconArray = [\n  \"url('./assets/cloud.png')\",\n  \"url('./assets/rain.png')\",\n  \"url('./assets/snowflake.png')\",\n  \"url('./assets/sun.png')\",\n];\nconst setWeatherIcon = (fieldName, desc) => {\n  if (desc.includes('clouds')) {\n    fieldName.style.backgroundImage = weatherIconArray[0];\n  } else if (desc.includes('rain')) {\n    fieldName.style.backgroundImage = weatherIconArray[1];\n  } else if (desc.includes('snow')) {\n    fieldName.style.backgroundImage = weatherIconArray[2];\n  } else {\n    fieldName.style.backgroundImage = weatherIconArray[3];\n  }\n};\n//assign weather data to text boxes\nconst assignWeatherData = weatherData => {\n  const todayData = weatherData[0];\n  const tomorrowData = weatherData[1];\n  const overmorrowData = weatherData[2];\n  const todayDesc = todayData.weather[0].description;\n  const tomorrowDesc = tomorrowData.weather[0].description;\n  const overmorrowDesc = overmorrowData.weather[0].description;\n  todayTempText.innerHTML = Math.round(Number(todayData.main.temp)) + '°C';\n  todayDescText.innerHTML = todayDesc;\n  tomorrowTempText.innerHTML =\n    Math.round(Number(tomorrowData.main.temp)) + '°C';\n  tomorrowDescText.innerHTML = tomorrowDesc;\n  overmorrowTempText.innerHTML =\n    Math.round(Number(overmorrowData.main.temp)) + '°C';\n  overmorrowDescText.innerHTML = overmorrowDesc;\n  setWeatherIcon(todayIcon, todayDesc);\n  setWeatherIcon(tomorrowIcon, tomorrowDesc);\n  setWeatherIcon(overmorrowIcon, overmorrowDesc);\n};\n//get weather based on device location\nconst getWeather = (lat, lon) => {\n  let weatherData;\n  const APIkey = '477f8b9f91e57252f7371ae3951b14d4';\n  const weatherApi = `https://api.openweathermap.org/data/2.5/forecast?lat=${lat}&lon=${lon}&units=metric&appid=${APIkey}`;\n  fetch(weatherApi)\n    .then(res => res.json())\n    .then(data => {\n      weatherData = data.list;\n      assignWeatherData(weatherData);\n    })\n    .catch(err => {\n      console.log(err);\n    });\n};\n//get device location\nfunction showPosition(position) {\n  const lat = Math.round(position.coords.latitude);\n  const lon = Math.round(position.coords.longitude);\n  getWeather(lat, lon);\n}\nconst getLocation = () => {\n  if (navigator.geolocation) {\n    navigator.geolocation.getCurrentPosition(showPosition);\n  } else {\n    alert('Geolocation is not supported by this browser.');\n  }\n};\n//get weather based on device location\nconst getWeatherByCity = userLocation => {\n  let weatherDataLocation;\n  const APIkey = '477f8b9f91e57252f7371ae3951b14d4';\n  const weatherApi = `https://api.openweathermap.org/data/2.5/forecast?q=${userLocation}&units=metric&appid=${APIkey}`;\n  fetch(weatherApi)\n    .then(res => res.json())\n    .then(data => {\n      weatherDataLocation = data.list;\n      assignWeatherData(weatherDataLocation);\n    })\n    .catch(err => {\n      console.log(err);\n    });\n};\n//get weather based on given by user location\nconst form = document.querySelector('.search-form');\nconst errMsg = document.querySelector('.err-msg');\nform.addEventListener('submit', e => {\n  e.preventDefault();\n  const searchLocation = form['search-input'].value.toLowerCase();\n  if (searchLocation === '') {\n    errMsg.innerHTML = 'Please add name';\n    form.reset;\n  } else {\n    errMsg.innerHTML = '';\n    getWeatherByCity(searchLocation);\n  }\n});\n//start all functions after load\nconst startPage = () => {\n  getRandomBackground();\n  getQuote();\n  getDate();\n  getDateForAnalog();\n  getLocation();\n};\ndocument.addEventListener('load', startPage());\n"],"sourceRoot":""}